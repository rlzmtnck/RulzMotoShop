// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	sellers "rulzmotoshop/business/sellers"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Repository) Login(email string, password string) (sellers.Domain, error) {
	ret := _m.Called(email, password)

	var r0 sellers.Domain
	if rf, ok := ret.Get(0).(func(string, string) sellers.Domain); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(sellers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: domain
func (_m *Repository) Register(domain *sellers.Domain) (sellers.Domain, error) {
	ret := _m.Called(domain)

	var r0 sellers.Domain
	if rf, ok := ret.Get(0).(func(*sellers.Domain) sellers.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(sellers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sellers.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SellerByID provides a mock function with given fields: id
func (_m *Repository) SellerByID(id int) (sellers.Domain, error) {
	ret := _m.Called(id)

	var r0 sellers.Domain
	if rf, ok := ret.Get(0).(func(int) sellers.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(sellers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: sellID, domain
func (_m *Repository) Update(sellID int, domain *sellers.Domain) (sellers.Domain, error) {
	ret := _m.Called(sellID, domain)

	var r0 sellers.Domain
	if rf, ok := ret.Get(0).(func(int, *sellers.Domain) sellers.Domain); ok {
		r0 = rf(sellID, domain)
	} else {
		r0 = ret.Get(0).(sellers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *sellers.Domain) error); ok {
		r1 = rf(sellID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
